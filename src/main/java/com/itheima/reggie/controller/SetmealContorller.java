package com.itheima.reggie.controller;

import com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import com.itheima.reggie.common.R;
import com.itheima.reggie.dto.DishDto;
import com.itheima.reggie.dto.SetmealDto;
import com.itheima.reggie.entity.Category;
import com.itheima.reggie.entity.Employee;
import com.itheima.reggie.entity.Setmeal;
import com.itheima.reggie.entity.SetmealDish;
import com.itheima.reggie.service.CategoryService;
import com.itheima.reggie.service.SetmealDishService;
import com.itheima.reggie.service.SetmealService;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.stream.Collectors;


/**
 * 套餐控制类
 * Create on 2023/05/18
 */
@RestController
@RequestMapping("/setmeal")
@Slf4j
public class SetmealContorller {

    @Autowired
    private SetmealService setmealService;

    @Autowired
    private SetmealDishService setmealDishService;

    @Autowired
    private CategoryService categoryService;


    /**
     * 新增套餐
     * @param setmealDto
     * @return
     */
    @PostMapping
    public R<String> save(@RequestBody SetmealDto setmealDto) {

        // 日志，测试用
        log.info("套餐信息：{}", setmealDto);

        // 调用saveWithDishes方法
        setmealService.saveWithDish(setmealDto);

        return R.success("新增套餐成功");
    }// 新增套餐方法 代码结束


    /**
     * 套餐分页查询
     * @param page
     * @param pageSize
     * @param name
     * @return
     */
    @GetMapping("/page")
    public R<Page> page(int page, int pageSize, String name) {

        // 日志，测试用
        log.info("page={}, pageSize={}, name={}", page, pageSize, name);

        // 构造分页构造器
        Page<Setmeal> pageinfo = new Page(page, pageSize);
        Page<SetmealDto> dtoPage = new Page<>();     /*同理（见DishController中的page方法），
                                                    增加Dto实体，实现分类信息输出*/
        // 构造条件构造器
        LambdaQueryWrapper<Setmeal> queryWrapper = new LambdaQueryWrapper<>();
        // 添加过滤条件
        queryWrapper.like(name != null,Setmeal::getName, name);
        // 添加排序条件
        queryWrapper.orderByDesc(Setmeal::getUpdateTime);
        // 执行分页查询返回结果
        setmealService.page(pageinfo, queryWrapper);

        // 对象拷贝
        BeanUtils.copyProperties(pageinfo, dtoPage, "records"/*同理，忽略records对象*/);
        List<Setmeal> records = pageinfo.getRecords();

        // 使用Lambda表达式获取records
        List<SetmealDto> list = records.stream().map((item) -> {
            // 创建一个setmealDto对象
            SetmealDto setmealDto = new SetmealDto();
            // 对象拷贝
            BeanUtils.copyProperties(item, setmealDto);
            // 分类id
            Long categoryId = item.getCategoryId();
            // 根据id查询分类对象
            Category category = categoryService.getById(categoryId);
            if (category != null) { // 加入非空判断，防止category为空的报错
                String categoryName = category.getName();
                setmealDto.setCategoryName(categoryName);
            }
            return setmealDto;
        }).collect(Collectors.toList());;

        // 将上面获取的list传入dtoPage的records字段中
        dtoPage.setRecords(list);
        // 返回结果
        return R.success(dtoPage);

    }// 套餐分页查询方法 代码结束


    /**
     * 删除套餐方法（参照CategoryController中同名方法）
     * @param ids
     * @return
     */
    @DeleteMapping
    public R<String> delete(@RequestParam List<Long> ids/*由于需要实现批量删除，传入的值不止一个，故使用Long泛型*/) {

        // 日志，测试用
        log.info("删除的id是：{}", ids);

        // 调用dishService的自定义方法进行删除
        setmealService.removeWithDish(ids);    // 注意此处的removeWithDish方法是自定义的 --generated by copilot on 2023/05/22
        return R.success("套餐信息删除成功！");

    }// 删除套餐方法 代码结束


    /**
     * 修改套餐售卖状态功能【自研】
     * 1.功能：现实现单个状态更新
     * 2.分析：需要传入两个参数，因为url为：setmeal/status/0?id=xxxxx，status后跟的0表示启售状态，
     * 而若为停售状态，则此url字段变为1
     * Create on 2023/05/19
     *
     * @param ids
     * @return
     */
    @PostMapping("/status/{status}")
    public R<String> update(@PathVariable/*注意此处不是RequsetParam！*/ Integer status,
                            @RequestParam List<Long>/*实现传入多个ids 2023/05/22*/ ids) {

        // 日志，测试用
        log.info("修改的套餐的状态是：{}， id是：{}", status, ids);

        // 构造条件
        /* sql语句：
        * UPDATE `reggie`.`setmeal` SET `status` = '1' WHERE (`id` = 'xxxxxxxxx');*/
        setmealService.updateStatus(status, ids);

        return R.success("套餐售卖状态修改成功！");

    }// 修改套餐售卖状态方法 代码结束


    /**
     * 根据条件查询套餐信息
     * @param setmeal
     * @return
     */
    @GetMapping("/list")
    public R<List<Setmeal>> list(Setmeal setmeal/*使用setmeal实体接收页面传来的categoryId*/) {

        // 1.构造条件构造器
        LambdaQueryWrapper<Setmeal> queryWrapper = new LambdaQueryWrapper<>();

        // 2.添加过滤条件（categoryId和status）
        queryWrapper.eq(setmeal.getCategoryId() != null, Setmeal::getCategoryId, setmeal.getCategoryId());
        queryWrapper.eq(setmeal.getStatus() != null, Setmeal::getStatus, setmeal.getStatus());
        // 3.添加排序条件（跟新时间）
        queryWrapper.orderByDesc(Setmeal::getUpdateTime);

        // 4.执行查询
        List<Setmeal> list = setmealService.list(queryWrapper);

        // 5.返回结果
        return R.success(list);
    }// 根据条件查询套餐信息方法 代码结束
}
